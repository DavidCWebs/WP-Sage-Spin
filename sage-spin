#!/bin/bash
#
# This script:
#
# - Creates a new directory for a WordPress site in /var/www/html.
# - Creates a new WordPress test site, with a fresh database.
# - Downloads, renames and activates the Sage starter theme.
# - Downloads & activates the "Soil" plugin.
# - Installs node & bower dependencies by running npm install.
# - Requires WP-CLI: http://wp-cli.org/
#
# Ubuntu: Add this script to `/usr/local/bin`
# Make it executable: `sudo chmod u+x /usr/local/bin/sage-spin` then you can invoke it by typing "sage-spin" in the terminal

# ------------------------------------------------------------------------------
# Set repo location for starter theme
#
sagerepo=git@github.com:roots/sage.git

# ------------------------------------------------------------------------------
# Set up directory
# ------------------------------------------------------------------------------
install_wordpress() {

  echo -e "Please enter the full path to the new wp directory, e.g. /var/www/html/newproject:"
  read WP_DIR

  # basename of the $DIR - used as the destination directory, under `/var/www/html`
  DEST_DIR=$(basename $WP_DIR)

  # Create new directory and use WP-CLI to download WordPress
  mkdir $WP_DIR
  sudo chown -R $USER $WP_DIR
  cd $WP_DIR
  wp core download
  echo "The new directory has been created at $WP_DIR"
  echo "It is owned by \"$USER\""
  echo "WordPress core has been downloaded"

}

# ------------------------------------------------------------------------------
# Build new database
#
# Username is just the "salted" db name. For publicly accessible databases,
# consider making this more secure.
# ------------------------------------------------------------------------------
setup_database() {

  echo -e "This script will create a local database with a new user."
  echo -e "Enter the name of the new database:"
  read  db_name

  newuser=$db_name
  newuser+=_user

  echo -e "Enter a STRONG password for the new database:"
  read newpassword

  # For security purposes, ask for a table prefix. Default to 'wp_'
  dbprefix=wp_
  echo -e "Please enter a database table prefix. Leave out the underscore. Defaults to 'wp_'."
  read dbprefix
  dbprefix+="_"

  if [ "$dbprefix" = "" ]; then
    $dbprefix=wp_
  fi

  echo -e "Enter the MySQL root password:"
  read  rootpassword

  db="CREATE DATABASE $db_name;GRANT ALL PRIVILEGES ON $db_name.* TO $newuser@localhost IDENTIFIED BY '$newpassword';FLUSH PRIVILEGES;"
  mysql -u root -p$rootpassword -e "$db"

  if [ $? != "0" ]; then  # NB "0" is the return from successful completion of the previous operation in BASH.
    echo "[Error]: Database creation failed"
    exit 1
  #else

  fi

}

# ------------------------------------------------------------------------------
# Set up wp-config.php using WP-CLI
# ------------------------------------------------------------------------------
configure_wordpress() {

  WP_PATH=http://localhost/$DEST_DIR

  wp core config --dbname=$db_name --dbuser=$newuser --dbpass=$newpassword --dbhost=localhost --dbprefix=$dbprefix --extra-php <<PHP
  define( 'WP_DEBUG', true );
  define( 'WP_DEBUG_LOG', true );
  define( 'WP_DEBUG_DISPLAY', true );
  define( 'DISALLOW_FILE_EDIT', true );

PHP

  # ------------------------------------------------------------------------------
  # Install WordPress. WP-CLI.
  # ------------------------------------------------------------------------------
  echo -e "Enter a strong password - your database might be exported to a publicly accessible server, so please set a strong password."
  read strong_password

  echo -e "Enter a username. NOT 'ADMIN'!"
  read WP_USERNAME

  wp core install --url=$WP_PATH --title="Basic Test Site" --admin_user=$WP_USERNAME --admin_password=$strong_password --admin_email=info@carawebs.com

  # discourage search engines
  wp option update blog_public 0

  # delete sample page, and create homepage
  wp post delete $(wp post list --post_type=page --posts_per_page=1 --post_status=publish --pagename="sample-page" --field=ID --format=ids)
  wp post create --post_type=page --post_title=Home --post_status=publish --post_author=$(wp user get $WP_USERNAME --field=ID --format=ids)
  wp post create --post_type=page --post_title=About --post_status=publish --post_author=$(wp user get $WP_USERNAME --field=ID --format=ids)

  # delete readme and license
  rm license.txt
  rm readme.html

  # set homepage as front page
  wp option update show_on_front 'page'

  # set homepage to be the new page
  wp option update page_on_front $(wp post list --post_type=page --post_status=publish --posts_per_page=1 --pagename=home --field=ID --format=ids)

  # set pretty urls
  wp rewrite structure '/%postname%/' --hard
  wp rewrite flush --hard

  # delete akismet and hello dolly
  wp plugin delete akismet
  wp plugin delete hello

  echo "------------------------------------------"
  echo " WordPress has been installed successfully: $WP_PATH "
  echo "------------------------------------------"
  echo " DB Info: "
  echo ""
  echo " DB Name: $dbname"
  echo " DB User: $newuser"
  echo " DB Pass: $newpassword"
  echo "------------------------------------------"
  echo " WordPress User details:"
  echo ""
  echo " WP username: $WP_USERNAME"
  echo " WP password: $strong_password"

}

# ------------------------------------------------------------------------------
# Set Up Sage Starter Theme
# ------------------------------------------------------------------------------
setup_theme () {

  cd $WP_DIR/wp-content/themes
  git clone $sagerepo
  echo -e "Choose a name for the new theme:"
  read THEMENAME
  cp -r $WP_DIR/wp-content/themes/sage $WP_DIR/wp-content/themes/$THEMENAME

  # Change first line of style.css to avoid confusion
  themeline="Theme Name:         "
  themeline+=$THEMENAME

  awk -v stylename="$themeline" '{ if (NR == 2) print stylename; else print $0}' $WP_DIR/wp-content/themes/$THEMENAME/style.css > $WP_DIR/wp-content/themes/$THEMENAME/stylemod.css
  sudo cp $WP_DIR/wp-content/themes/$THEMENAME/stylemod.css $WP_DIR/wp-content/themes/$THEMENAME/style.css
  rm -rf $WP_DIR/wp-content/themes/$THEMENAME/stylemod.css

  echo -e "-------------------------------------------------------------------------"
  echo -e "The first line of style.css has been amended"
  echo -e "to reflect your theme name - don\'t forget to amend the rest of this file."
  echo -e "NB: this script has appended a line to wp-config.php to set up the Roots development environment."
  echo -e "-------------------------------------------------------------------------"

  # Backup original config file
  cp $WP_DIR/wp-config.php $WP_DIR/wp-config.bak.php

  # newline="/* Define the Roots Environment */\ndefine('WP_ENV', 'development');\n"
  # awk -v insert="$newline" 'NR==3{print insert}1' $WP_DIR/wp-config.php > $WP_DIR/wp-config-temp.php

  cp $WP_DIR/wp-config-temp.php $WP_DIR/wp-config.php

  # amend JSON Manifest
  cd $WP_DIR/wp-content/themes/$THEMENAME/assets
  replace "http://example.dev" $WP_PATH -- manifest.json

}

install_soil () {

  cd $WP_DIR/wp-content/plugins
  git clone https://github.com/roots/soil.git
  wp plugin activate soil

}

setup_node () {

  cd $WP_DIR/wp-content/themes/$THEMENAME

  # Note: npm runs without sudo if node has been installed on your system by the nvm method:
  # https://github.com/creationix/nvm (recommended!)
  # Otherwise, the npm install command should run as sudo, followed by bower install.
  # For this case comment out line 133 & enable lines 134 & 135)
  # Or move to the theme directory after installation is complete and run sudo npm install followed by bower install
  npm install
  # sudo npm install
  # bower install
  # For sage, overtly call bower
  bower install
}

run_gulp () {

  cd $WP_DIR/wp-content/themes/$THEMENAME
  # Run gulp first timne around to generate the assets
  gulp
  gulp watch

}

activate_theme () {

  cd $WP_DIR/wp-content/themes/$THEMENAME
  wp theme activate $THEMENAME

}

setup_repo () {

  cd $WP_DIR/wp-content/themes/$THEMENAME

  # remove existing git repo
  sudo rm -rf $WP_DIR/wp-content/themes/$THEMENAME/.git
  git init
  repo_name=$1
  dir_name=`basename $(pwd)`
  invalid_credentials=0

  if [ "$repo_name" = "" ]; then
    echo "  Repo name (hit enter to use '$dir_name')?"
    read repo_name
  fi

  if [ "$repo_name" = "" ]; then
    repo_name=$dir_name
  fi

  GIT_USERNAME=`git config github.user`
  if [ "$GIT_USERNAME" = "" ]; then
    echo "  Could not find Git username, run 'git config --global github.user <username>'"
    invalid_credentials=1
  fi

  token=`git config github.token`
  if [ "$token" = "" ]; then
    echo "  Could not find token, run 'git config --global github.token <token>'"
    invalid_credentials=1
  fi

  if [ "$invalid_credentials" -eq "1" ]; then
    return 1
  fi

  echo -n "  Creating Github repository '$repo_name' ..."
  curl -u "$GIT_USERNAME:$token" https://api.github.com/user/repos -d '{"name":"'$repo_name'"}' > /dev/null 2>&1
  echo " done."

  echo -n "  Pushing local code to remote ..."
  git remote add origin git@github.com:$GIT_USERNAME/$repo_name.git > /dev/null 2>&1
  git push -u origin master > /dev/null 2>&1
  git add -A
  git commit -m "First Commit"
  git push origin master
  echo " done."

}

# ------------------------------------------------------------------------------
# Base functions
# ------------------------------------------------------------------------------
install_wordpress
setup_database
configure_wordpress

# ------------------------------------------------------------------------------
# Some options
# ------------------------------------------------------------------------------
read -p "Do you want to set up the Sage Starter theme? [y/N]" yn
case $yn in
  [Yy]* ) setup_theme;;
  [Nn]* ) exit ;;
  * ) echo "Please answer yes or no.";;
esac

read -p "Set up a new GitHub repo for $THEMENAME? [y/N]" yn
case $yn in
  [Yy]* ) setup_repo;;
  [Nn]* ) ;;
  * ) echo "Please answer yes or no.";;
esac

read -p "Do you want to install and activate the Roots \"Soil\" plugin? [y/N]" yn
case $yn in
  [Yy]* ) install_soil;;
  [Nn]* ) exit ;;
  * ) echo "Please answer yes or no.";;
esac

read -p "Do you want to go to the $THEMENAME theme and install node dependencies? [y/N]" yn
case $yn in
  [Yy]* ) setup_node;;
  [Nn]* ) exit ;;
  * ) echo "Please answer yes or no.";;
esac

read -p "Do you want to activate the $THEMENAME theme? [y/N]" yn
case $yn in
  [Yy]* ) activate_theme;;
  [Nn]* ) exit ;;
  * ) echo "Please answer yes or no.";;
esac

read -p "Move to the theme directory and run the gulp build task? [y/N]" yn
case $yn in
  [Yy]* ) run_gulp;;
  [Nn]* ) exit ;;
  * ) echo "Please answer yes or no.";;
esac

sitelocation="Access your new site: http://localhost/"
sitelocation+=$WP_DIR
echo -e "------------------------------------------------"
echo -e "Finished!"
echo $sitelocation
echo -e "------------------------------------------------"
